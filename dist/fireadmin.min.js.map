{"version":3,"sources":["fireadmin.min.js","/source/fireadmin.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","Fireadmin","_","this","runConsoleMethod","methodName","methodData","console","apply","log","buildMessageArgs","logData","msgStr","msgObj","isObject","logLevel","has","obj","func","file","each","omit","keys","ind","list","isString","msg","config","logger","msgArgs","envName","info","warn","debug","error","url","opts","description","Error","ref","Firebase","fbUrl","appName","AppNameFromUrl","options","value","listName","auth","getAuth","author","uid","createdAt","Date","now","child","push","err","Promise","reject","resolve","message","isAuthorized","authorObjQuery","orderByChild","equalTo","on","listSnap","val","code","fbRef","listPath","usersListSnap","numChildren","onlineUserSnap","time1","time2","startTime","endTime","startAt","endAt","sessionsSnap","time","totalLength","sessionCount","forEach","sessionSnap","session","hasOwnProperty","conversion","ended","began","average","Math","floor","remove","img","fa","reqData","apiRequest","res","signupData","_this","password","handleCb","errorCb","createUser","emailAuth","authData","createUserProfile","userAccount","type","authWithCustomToken","token","provider","authWithOAuthPopup","loginData","_this2","authWithPassword","setupPresence","_this3","id","accountSnap","successCb","email","querySnapshot","_this4","amOnline","onlineRef","sessionsRef","userSessionRef","snapShot","onDisconnect","ServerValue","TIMESTAMP","user","endedRef","set","currentSesh","onAuth","path","args","Array","slice","call","arguments","pathRef","get"],"mappings":"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","file":"fireadmin.min.js","sourcesContent":[null,"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash')) :\n\ttypeof define === 'function' && define.amd ? define(['lodash'], factory) :\n\tglobal.Fireadmin = factory(global._);\n}(this, function (_) { 'use strict';\n\n\t_ = 'default' in _ ? _['default'] : _;\n\n\tlet config = {\n\t};\n\n\t//Set default log level to debug\n\tlet logLevel = 'debug';\n\t//Set log level from config\n\tif (config.logLevel) {\n\t\tlogLevel = config.logLevel;\n\t}\n\n\tlet logger = {\n\t\tlog(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\trunConsoleMethod('log', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('log', msgArgs);\n\t\t\t}\n\t\t},\n\t\tinfo(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\trunConsoleMethod('info', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('info', msgArgs);\n\t\t\t}\n\t\t},\n\t\twarn(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\trunConsoleMethod('warn', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('warn', msgArgs);\n\t\t\t}\n\t\t},\n\t\tdebug(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\t// runConsoleMethod('debug', msgArgs);\n\t\t\t\t//Do not display console debugs in production\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('debug', msgArgs);\n\t\t\t}\n\t\t},\n\t\terror(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\t//TODO: Log to external logger\n\t\t\t\trunConsoleMethod('error', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('error', msgArgs);\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction runConsoleMethod(methodName, methodData) {\n\t\t//Safley run console methods or use console log\n\t\tif (methodName && console[methodName]) {\n\t\t\treturn console[methodName].apply(console, methodData);\n\t\t} else {\n\t\t\treturn console.log.apply(console, methodData);\n\t\t}\n\t}\n\tfunction buildMessageArgs(logData) {\n\t\tvar msgStr = '';\n\t\tvar msgObj = {};\n\t\t//TODO: Attach time stamp\n\t\t//Attach location information to the beginning of message\n\t\tif (_.isObject(logData)) {\n\t\t\tif (logLevel == 'debug') {\n\t\t\t\tif (_.has(logData, 'func')) {\n\t\t\t\t\tif (_.has(logData, 'obj')) {\n\t\t\t\t\t\t//Object and function provided\n\t\t\t\t\t\tmsgStr += `[${logData.obj}.${logData.func}()]\\n `;\n\t\t\t\t\t} else if (_.has(logData, 'file')) {\n\t\t\t\t\t\tmsgStr += `[${logData.file} > ${logData.func}()]\\n `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsgStr += `[${logData.func}()]\\n `;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Print each key and its value other than obj and func\n\t\t\t_.each(_.omit(_.keys(logData)), (key, ind, list) => {\n\t\t\t\tif (key != 'func' && key != 'obj') {\n\t\t\t\t\tif (key == 'description' || key == 'message') {\n\t\t\t\t\t\tmsgStr += logData[key];\n\t\t\t\t\t} else if (_.isString(logData[key])) {\n\t\t\t\t\t\t// msgStr += key + ': ' + logData[key] + ', ';\n\t\t\t\t\t\tmsgObj[key] = logData[key];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Print objects differently\n\t\t\t\t\t\t// msgStr += key + ': ' + logData[key] + ', ';\n\t\t\t\t\t\tmsgObj[key] = logData[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tmsgStr += '\\n';\n\t\t} else if (_.isString(logData)) {\n\t\t\tmsgStr = logData;\n\t\t}\n\t\tvar msg = [msgStr, msgObj];\n\n\t\treturn msg;\n\t}\n\n\tclass Fireadmin {\n\t\t/* Constructor\n\t\t * @param {string} appName Name of application\n\t\t */\n\t\tconstructor(url, opts) {\n\t\t\tif (!url) {\n\t\t\t\tlogger.error({description: 'Application name requires to use Fireadmin.', func: 'constructor', obj: 'Fireadmin'});\n\t\t\t\tthrow new Error('Application name is required to use Fireadmin');\n\t\t\t} else {\n\t\t\t\tthis.ref = new Firebase(url);\n\t\t\t\tthis.fbUrl = url;\n\t\t\t\tthis.appName = AppNameFromUrl(url);\n\t\t\t}\n\t\t\tif (opts) {\n\t\t\t\tthis.options = opts;\n\t\t\t}\n\t\t}\n\t\tget auth() {\n\t\t\treturn this.ref.getAuth();\n\t\t}\n\t\tget isAuthorized() {\n\t\t\treturn !this.auth || this.auth === null;\n\t\t}\n\t\t/**\n\t  * This callback is displayed as part of the Requester class.\n\t  * @callback Fireadmin~errorCb\n\t  * @param {String} code\n\t  * @param {String} message\n\t  */\n\t  /**\n\t   * Creates an object provided the name of the list the object will go into and the object itthis.\n\t   * The object is created with a createdAt parameter that is a server timestamp from Firebase.\n\t   * If a user is currently signed in, the object will contain the author's `$uid` under the author parameter.\n\t   * @param {String} listName - The name of the list the object will be put into. `Required`\n\t   * @param {Object} objectData - Data you wish to be contained within new object. `Required`\n\t   * @param {Function} onSuccess - Function that runs when your object has been created successfully and returns newly created object. `Optional`\n\t   * @param {Function} onError - Function that runs if there is an error creating the object. `Optional`\n\t   * @example\n\t   * //creates new message object in message list\n\t   * fa.createObject('messages', {title:Example, content:'Cool Message'}, ).then(function(newMsg){\n\t   *  logger.log('New Message created successfuly:', newMsg);\n\t   * }, function(err){\n\t   *  logger.error('Error creating new message:', err);\n\t   * });\n\t   */\n\t\tcreateObject(listName, obj) {\n\t    var auth = this.ref.getAuth();\n\t    if (auth) {\n\t      obj.author = auth.uid;\n\t    }\n\t    obj.createdAt = Date.now();\n\t    return this.ref.child(listName).push(obj, (err) => {\n\t      if (!err) {\n\t\t\t\t\treturn Promise.resolve(obj);\n\t      } else {\n\t\t\t\t\treturn Promise.reject(err);\n\t      }\n\t    });\n\t  }\n\t\t/**\n\t\t * Gets list of objects created by the currently logged in User.\n\t\t * @param {String | Array} listPath -  The name or path of the list the objects will be grabbed from. `Required`\n\t\t * @param {String} Uid - The Uid of the user that created objects. `Required`\n\t\t * @param {Function} onSuccess - Function that runs when the list has been retrieved successfully. `Optional`\n\t\t * @param {Fireadmin~errorCb} onError -  Function that runs if there is an error. `Optional`\n\t\t * @example\n\t\t * // Signin User with email and password\n\t\t * var uid = 'simplelogin:1';\n\t\t * fb.listByUid('messages', uid, function(messageList){\n\t\t *  logger.log('List of messages by ' + uid + ' : ', messageList);\n\t\t * }, function(err){\n\t\t *  logger.error('Error getting message list:', err);\n\t\t * });\n\t\t */\n\t\tlistByCurrentUser(listName) {\n\t\t\tif (!listName) {\n\t\t\t\treturn Promise.reject({message: 'Listname required to list objects.'});\n\t\t\t}\n\t    if (this.isAuthorized) {\n\t      let authorObjQuery = this.ref.child(listName).orderByChild('author').equalTo(auth.uid);\n\t\t\t\treturn authorObjQuery.on('value', (listSnap) => {\n\t\t\t\t\treturn Promise.resolve(listSnap.val());\n\t      }, (err) => {\n\t\t\t\t\treturn Promise.reject(err);\n\t      });\n\t    } else {\n\t      var error = {code: 'INVALID_AUTH', message: 'listByCurrentUser cannot load list without current user'};\n\t      logger.error(error.message);\n\t\t\t\treturn Promise.reject(error);\n\t    }\n\t\t}\n\t\t/**\n\t\t * Gets list of objects created by the currently logged in User.\n\t\t * @param {String | Array} listPath -  The name or path of the list the objects will be grabbed from. `Required`\n\t\t * @param {String} Uid - The Uid of the user that created objects. `Required`\n\t\t * @param {Function} onSuccess - Function that runs when the list has been retrieved successfully. `Optional`\n\t\t * @param {Fireadmin~errorCb} onError -  Function that runs if there is an error. `Optional`\n\t\t * @example\n\t\t * // Signin User with email and password\n\t\t * var uid = 'simplelogin:1';\n\t\t * fb.listByUid('messages', uid, function(messageList){\n\t\t *  logger.log('List of messages by ' + uid + ' : ', messageList);\n\t\t * }, function(err){\n\t\t *  logger.error('Error getting message list:', err);\n\t\t * });\n\t\t */\n\t\tlistByUid(uid) {\n\t\t\treturn this.fbRef(listPath).orderByChild('author').equalTo(uid).on('value', (listSnap) => {\n\t\t\t\treturn Promise.resolve(listSnap.val());\n\t    }, (err) => {\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t\t}\n\t\t/**\n\t   * Get total user count\n\t   * @param {Function} onSuccess - Function that returns total user count. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * fa.getUserCount('users', function(count){\n\t   *  logger.log('There are is a total of ' + count + ' users.');\n\t   * });\n\t   */\n\t  getUserCount() {\n\t    return this.ref.child('users').on('value', (usersListSnap) => {\n\t\t\t\treturn Promise.resolve(usersListSnap.numChildren());\n\t    }, (err) => {\n\t\t\t\tlogger.error({description: 'Error getting user count.', func: 'getUserCount', obj: 'Fireadmin'});\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  /** Get the number of users that are currently online.\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess - Function that returns number of users currently online. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * fa.getOnlineUserCount(function(count){\n\t   *   logger.log('There are ' + count + ' users currently online.');\n\t   * });\n\t   *\n\t   */\n\t  getOnlineUserCount() {\n\t    return this.ref.child('presence').on('value', (onlineUserSnap) => {\n\t      logger.log('There are currently' + onlineUserSnap.numChildren() + ' users online.');\n\t\t\t\treturn Promise.resolve(onlineUserSnap.numChildren());\n\t    }, (err) => {\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  /**\n\t   * Get the number of sessions between two times\n\t   * @param {Number} startTime - The time at which to start the between period (in UTC ms). `Required`\n\t   * @param {Number} endTime - The time at which to start the between period (in UTC ms). `Required`\n\t   * @param {Function} onSuccess - Function that runs on completion of gathering list count. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * //String list name\n\t   * fa.getObjectCount('users', function(count){\n\t   *  logger.log('There are ' + count + ' users');\n\t   * });\n\t   */\n\t  sessionsBetween(time1, time2) {\n\t    logger.log({description: 'Sessions between called.', startTime: time1, endTime: time2, func: 'sessionsBetween', obj: 'Fireadmin'});\n\t    return this.ref.child('sessions').orderByChild('ended').startAt(time1).endAt(time2).on('value', (sessionsSnap) => {\n\t\t\t\treturn Promise.resolve(sessionsSnap.numChildren());\n\t    }, (err) => {\n\t\t\t\tlogger.error({description: 'Error getting sessions between specified times.', error: err, func: 'sessionsBetween', obj: 'Fireadmin'});\n\t\t\t\treturn Promise.reject({message: 'Error getting sessions.'});\n\t    });\n\t  }\n\t  /**\n\t   * Get the number of sessions since a specific time\n\t   * @param {String} time - The UTC time to calculate from.\n\t   * @param {Function} onSuccess - Function that runs on completion of gathering list count. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * var dt = new Date(); //Create a new Data object\n\t   * dt.setMonth(dt.getMonth()-1); //Set date back a month\n\t   * var monthAgo = dt.getTime(); //Convert to UTC time\n\t   * //Get number of sessions since a month ago\n\t   * fa.sessionsSince(monthAgo, function(count){\n\t   *  logger.log('There are ' + count + ' sessions in the past month');\n\t   * });\n\t   */\n\t  sessionsSince(time) {\n\t    return this.ref.child('sessions').orderByChild('ended').startAt(time).endAt(Date.now()).on('value', (sessionsSnap) => {\n\t\t\t\treturn Promise.resolve(sessionsSnap.numChildren());\n\t    }, (err) => {\n\t\t\t\tlogger.error({description: 'Error getting sessions between specified times.', error: err, func: 'sessionsSince', obj: 'Fireadmin'});\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  /**\n\t   * Get count of objects in a given path or list\n\t   * @param {Function} onSuccess - Function that runs on completion of gathering average session length. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * //Get the average session length\n\t   * fa.averageSessionLength(function(count){\n\t   *  logger.log('The average session length is ~' + count ' mins');\n\t   * });\n\t   */\n\t  averageSessionLength() {\n\t    return this.ref.child('sessions').on('value', (sessionsSnap) => {\n\t      var totalLength = null;\n\t      var sessionCount = sessionsSnap.numChildren();\n\t      sessionsSnap.forEach((sessionSnap) => {\n\t        var session = sessionSnap.val();\n\t        if (session.hasOwnProperty('ended') && session.hasOwnProperty('began')) {\n\t          //Gather length of session\n\t          // Convert difference in ms to minutes\n\t\t\t\t\t\tvar conversion = (session.ended - session.began) / (1000 * 60) ;\n\t          totalLength = totalLength + conversion;\n\t          logger.log('total length is now:', totalLength);\n\t        } else {\n\t          logger.log('removing unfinished session:', sessionSnap.val());\n\t          sessionCount--;\n\t          logger.log('session count:', sessionCount);\n\t        }\n\t      });\n\t      logger.log('totalLength:', totalLength);\n\t      var average = Math.floor(totalLength / sessionCount);\n\t      logger.log('average in minutes:', average);\n\t\t\t\treturn Promise.resolve(average);\n\t    }, (err) => {\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  removeUserSessions(uid) {\n\t    return this.ref.child('sessions').orderByChild('user').equalTo(uid).on('value', (sessionsSnap) => {\n\t     var sessionCount = sessionsSnap.numChildren();\n\t      sessionsSnap.forEach((session) => {\n\t        session.ref().remove();\n\t      });\n\t      logger.log(sessionCount + ' Sessions sucessfully removed');\n\t\t\t\treturn Promise.resolve();\n\t    }, (err) => {\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  customAuthToken(img) {\n\t    //Send file to server\n\t    var fa = this;\n\t    var reqData = {appName: fa.appName};\n\t    apiRequest('auth', reqData, (res) => {\n\t      if (res.hasOwnProperty('token')) {\n\t        logger.log('auth request response:', res);\n\t\t\t\t\treturn Promise.resolve(res);\n\t      } else {\n\t\t\t\t\treturn Promise.reject({code: 'SERVER_ERROR'});\n\t      }\n\t    }, (err) => {\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Object | String} loginData - Login data object or string for 3rd Party Signup (Twitter, Github, Google) `Required`\n\t   * @param {Object} loginData.email - Email of new user (`Required` only for email signup).\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.userSignup({email:test@test.com, password:'testtest'}, function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  userSignup(signupData) {\n\t    if (typeof signupData === 'object' && signupData.hasOwnProperty('email')) {\n\t      //Email signup\n\t      if (!signupData.hasOwnProperty('password') && signupData.password.length <= 8) {\n\t        return handleCb(errorCb,{message: 'A valid Password is required to signup.'});\n\t      }\n\t      //Create new user in simple login\n\t      return this.createUser(signupData, (error) => {\n\t        if (error === null) {\n\t          logger.log('[emailSignup] User created successfully. Logging in as new user...');\n\t            // Login with new account\n\t            this.emailAuth(signupData, (authData) => {\n\t              //Create new user profile\n\t              return createUserProfile(authData, this.ref, (userAccount) => {\n\t\t\t\t\t\t\t\t\treturn Promise.resolve(userAccount);\n\t              }, (err) => {\n\t                //Error creating profile\n\t\t\t\t\t\t\t\t\treturn Promise.reject(err);\n\t              });\n\t            }, (err) => {\n\t              //Error authing with email\n\t\t\t\t\t\t\t\treturn Promise.reject(err);\n\t            });\n\t        } else {\n\t          //Error creating new User\n\t          logger.error('[emailSignup] Error creating user:', error.message);\n\t\t\t\t\t\treturn Promise.reject(error);\n\t        }\n\t      });\n\n\t    } else if (signupData.hasOwnProperty('type') && signupData.type == 'username') {\n\t      //[TODO] User signup with with custom auth token with username as uid\n\t      //Username signup\n\t      //request a signup with username as uid\n\t      apiRequest('signup', signupData, (res) => {\n\t        logger.log('request for token successful:', res);\n\t        return this.authWithCustomToken(res.token, (err, authData) => {\n\t          if (err) {\n\t\t\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t\t\t}\n\t          return createUserProfile(authData, this.ref, (userAccount) => {\n\t\t\t\t\t\t\treturn Promise.resolve(userAccount);\n\t          }, (err) => {\n\t            //Error creating profile\n\t\t\t\t\t\t\treturn Promise.reject(err);\n\t          });\n\t        });\n\t      }, (err) => {\n\t\t\t\t\treturn Promise.reject(err);\n\t      });\n\t    } else if (typeof signupData == 'string' || signupData.hasOwnProperty('type')) {\n\t      //3rd Party Signup\n\t\t\t\tlet provider = typeof signupData === 'string' ? signupData : signupData.type;\n\t      // Auth using 3rd party OAuth\n\t      return this.authWithOAuthPopup(provider, (err, authData) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t\t}\n\t        //Create new profile with user data\n\t        return createUserProfile(authData, this.ref, (userAccount) => {\n\t\t\t\t\t\treturn Promise.resolve(userAccount);\n\t        }, (err) => {\n\t          //Error creating profile\n\t\t\t\t\t\treturn Promise.reject(err);\n\t        });\n\t      });\n\t    }\n\t  }\n\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Object} loginData Login data of new user\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.emailAuth({email:test@test.com, password:'testtest'}, function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  emailAuth(loginData) {\n\t    return this.ref.authWithPassword(loginData, (error, authData) => {\n\t      if (error === null) {\n\t        // user authenticated with Firebase\n\t        logger.log('User ID: ' + authData.uid + ', Provider: ' + authData.provider);\n\t        // Manage presence\n\t        this.setupPresence(authData.uid);\n\t        // [TODO] Check for account/Add account if it doesn't already exist\n\t\t\t\t\treturn Promise.resolve(authData);\n\t      } else {\n\t        logger.error('Error authenticating user:', error);\n\t\t\t\t\treturn Promise.reject(err);\n\t      }\n\t    });\n\t  }\n\t  /** Modified version of Firebase's authWithOAuthPopup function that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {String} provider - Login data of new user. `Required`\n\t   * @param {Function} onSuccess - Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.authWithOAuthPopup('google', function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  authWithOAuthPopup(provider) {\n\t    //[TODO] Check enabled login types\n\t    return this.ref.authWithOAuthPopup(provider,(error, authData) => {\n\t      if (error === null) {\n\t        // user authenticated with Firebase\n\t        logger.log({description: 'Auth popup responded.', authData: authData, id: authData.uid, provider: authData.provider, func: 'authWithOAuthPopup', obj: 'Fireadmin'});\n\t        // Manage presence\n\t        this.setupPresence(authData.uid);\n\t        // [TODO] Check for account/Add account if it doesn't already exist\n\t\t\t\t\treturn Promise.resolve(authData);\n\t      } else {\n\t        logger.error('Error authenticating user:', error);\n\t\t\t\t\treturn Promise.reject(error);\n\t      }\n\t    });\n\t  }\n\t  newUserFromAnonyomous() {\n\n\t  }\n\t  /** Log in with Github through OAuth\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess - Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.githubAuth(function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  githubAuth() {\n\t    return this.authWithOAuthPopup('github');\n\t  }\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.githubAuth(function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  googleAuth() {\n\t    return this.authWithOAuthPopup('google');\n\t  }\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.githubAuth(function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  twitterAuth() {\n\t    return this.authWithOAuthPopup('twitter');\n\t  }\n\n\t  /** Get account for a user given their uid.\n\t   * @memberOf Fireadmin#\n\t   * @param {String} uid Unique Id for account.\n\t   * @param {Function} onSuccess Function that returns account info once it is loaded. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Get account for uid: simplelogin:1\n\t   * fa.accountByUid('simplelogin:1', function(account){\n\t   *   logger.log('Account for user with uid: ' + uid + ' is : ', account);\n\t   * }, function(err){\n\t   *    logger.error('Error getting account for ' + uid + ' : ', err);\n\t   * });\n\t   *\n\t   */\n\t  accountByUid(uid) {\n\t    return this.ref.child(uid).on('value', (accountSnap) => {\n\t      handleCb(successCb, accountSnap.val());\n\t    }, (err) => {\n\t      logger.error('Error getting account for ' + uid + ' : ', err);\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  /** Get user account that is associated to a given email.\n\t   * @memberOf Fireadmin#\n\t   * @param {String} email - Email of account to retreive.\n\t   * @param {Fireadmin~accountByEmailCb} onSuccess - Function that returns account info once it is loaded. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * fa.accountByEmail('test@test.com', function(account){\n\t   *   logger.log('Account loaded:' + account);\n\t   * }, function(err){\n\t   *  logger.error('Error getting account by email:', err);\n\t   * });\n\t   *\n\t   */\n\t  accountByEmail(email) {\n\t    if (email && typeof email == 'string') {\n\t      return this.ref.child('users').orderByChild('email').equalTo(email).on('value', (querySnapshot) => {\n\t        logger.log('accountByEmail returned:', querySnapshot.val());\n\t\t\t\t\treturn Promise.resolve(querySnapshot.val());\n\t      }, (err) => {\n\t        logger.error('Error getting account by email:', err);\n\t\t\t\t\treturn Promise.reject(err);\n\t      });\n\t    } else {\n\t\t\t\treturn Promise.reject({message: 'Email is required to get account.'});\n\t    }\n\t  }\n\t  /**\n\t   * Success callback for accountByEmail function that returns the account associated with a provided email.\n\t   * @callback Fireadmin~accountByEmailCb\n\t   * @param {Object} account Account associated with provided email.\n\t   * @param {String} account.email Email associated with account.\n\t   * @param {String} account.createdAt UTC Time when the account was created.\n\t   */\n\n\t  /** Start presence management for a specificed user uid. This function is used within Fireadmin login functions.\n\t   * @memberOf Fireadmin#\n\t   * @param {String} uid Unique Id for user that for which presence is being setup.\n\t   * @example\n\t   * fa.setupPresence('simplelogin:1');\n\t   *\n\t   */\n\t  setupPresence(uid) {\n\t    logger.log({description: 'setupPresence called', uid: uid, func: 'setupPresense', obj: 'Fireadmin'});\n\t    var amOnline = this.ref.child('.info/connected');\n\t    var onlineRef = this.ref.child('presence').child(uid);\n\t    var sessionsRef = this.ref.child('sessions');\n\t    var userRef = this.ref.child('users').child(uid);\n\t    var userSessionRef = this.ref.child('users').child(uid).child('sessions');\n\t    var pastSessionsRef = userSessionRef.child('past');\n\t    return amOnline.on('value', (snapShot) => {\n\t      if (snapShot.val()) {\n\t        //user is online\n\t        var onDisconnectRef = this.ref.onDisconnect();\n\t        // add session and set disconnect\n\t        var session = sessionsRef.push({began: Firebase.ServerValue.TIMESTAMP, user: uid});\n\t        var endedRef = session.child('ended');\n\t        endedRef.onDisconnect().set(Firebase.ServerValue.TIMESTAMP);\n\t        //add correct session id to user\n\t        // adding session id to current list under user's session\n\t        var currentSesh = userSessionRef.child('current').push(session.key());\n\t        // Remove session id from users current session folder\n\t        currentSesh.onDisconnect().remove();\n\t        // remove from presence list\n\t        onlineRef.set(true);\n\t        onlineRef.onDisconnect().remove();\n\t        // Add session id to past sessions on disconnect\n\t        // pastSessionsRef.onDisconnect().push(session.key());\n\t        // Do same on unAuth\n\t        this.onAuth((authData) => {\n\t          if (!authData) {\n\t            endedRef.set(Firebase.ServerValue.TIMESTAMP);\n\t            currentSesh.remove();\n\t            onlineRef.remove();\n\t          }\n\t        });\n\t      }\n\t    });\n\t  }\n\t  /** Get a firebase reference for a path in array | string form\n\t   *\n\t   * @memberOf Fireadmin#\n\t   * @param {String|Array} path relative path to the root folder in Firebase instance\n\t   * @returns A Firebase instance\n\t   * @example\n\t   * //Array as path\n\t   * var userRef = fa.fbRef(['users', uid]);\n\t   */\n\t  fbRef(path) {\n\t    var ref = this.ref;\n\t    var args = Array.prototype.slice.call(arguments);\n\t    if (args.length) {\n\t      //[TODO] Have this return a Fireadmin object\n\t      ref = ref.child(pathRef(args));\n\t    }\n\t    return ref;\n\t  }\n\t};\n\n\treturn Fireadmin;\n\n}));"],"sourceRoot":"/source/"}