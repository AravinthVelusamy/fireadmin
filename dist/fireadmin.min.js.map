{"version":3,"sources":["fireadmin.min.js","/source/fireadmin.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","Fireadmin","Firebase","_","this","runConsoleMethod","methodName","methodData","console","apply","log","buildMessageArgs","logData","msgStr","msgObj","isObject","logLevel","has","obj","func","file","each","omit","keys","ind","list","isString","msg","AppNameFromUrl","url","match","apiRequest","reqLocation","reqData","successCb","errorCb","reqUrl","createUserProfile","authData","ref","arguments","userRef","child","uid","userObj","role","provider","email","password","extend","orderByChild","equalTo","on","userQuery","val","error","message","account","JSON","stringify","status","Promise","reject","once","userSnap","hasChild","createdAt","ServerValue","TIMESTAMP","setWithPriority","err","resolve","config","logger","msgArgs","envName","info","warn","debug","opts","description","Error","fbUrl","appName","options","value","listName","_this","auth","getAuth","author","Date","now","push","_this2","isAuthorized","authorObjQuery","listSnap","code","listPath","_this3","fbRef","_this4","usersListSnap","numChildren","_this5","onlineUserSnap","time1","time2","_this6","startTime","endTime","startAt","endAt","sessionsSnap","time","_this7","_this8","totalLength","sessionCount","forEach","sessionSnap","session","hasOwnProperty","conversion","ended","began","average","Math","floor","_this9","remove","img","fa","res","signupData","_this10","handleCb","createUser","emailAuth","userAccount","type","authWithCustomToken","token","authWithOAuthPopup","loginData","_this11","authWithPassword","userId","setupPresence","_this12","id","_this13","accountSnap","querySnapshot","_this14","amOnline","onlineRef","sessionsRef","userSessionRef","snapShot","onDisconnect","user","endedRef","set","currentSesh","onAuth","path","args","Array","slice","call","pathRef","get"],"mappings":"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","file":"fireadmin.min.js","sourcesContent":[null,"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('firebase'), require('lodash')) :\n\ttypeof define === 'function' && define.amd ? define(['firebase', 'lodash'], factory) :\n\tglobal.Fireadmin = factory(global.Firebase,global._);\n}(this, function (Firebase,_) { 'use strict';\n\n\tFirebase = 'default' in Firebase ? Firebase['default'] : Firebase;\n\t_ = 'default' in _ ? _['default'] : _;\n\n\tlet config = {\n\t};\n\n\t//Set default log level to debug\n\tlet logLevel = 'debug';\n\t//Set log level from config\n\tif (config.logLevel) {\n\t\tlogLevel = config.logLevel;\n\t}\n\n\tlet logger = {\n\t\tlog(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\trunConsoleMethod('log', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('log', msgArgs);\n\t\t\t}\n\t\t},\n\t\tinfo(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\trunConsoleMethod('info', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('info', msgArgs);\n\t\t\t}\n\t\t},\n\t\twarn(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\trunConsoleMethod('warn', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('warn', msgArgs);\n\t\t\t}\n\t\t},\n\t\tdebug(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\t// runConsoleMethod('debug', msgArgs);\n\t\t\t\t//Do not display console debugs in production\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('debug', msgArgs);\n\t\t\t}\n\t\t},\n\t\terror(logData) {\n\t\t\tlet msgArgs = buildMessageArgs(logData);\n\t\t\tif (config.envName == 'production') {\n\t\t\t\t//TODO: Log to external logger\n\t\t\t\trunConsoleMethod('error', msgArgs);\n\t\t\t} else {\n\t\t\t\trunConsoleMethod('error', msgArgs);\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction runConsoleMethod(methodName, methodData) {\n\t\t//Safley run console methods or use console log\n\t\tif (methodName && console[methodName]) {\n\t\t\treturn console[methodName].apply(console, methodData);\n\t\t} else {\n\t\t\treturn console.log.apply(console, methodData);\n\t\t}\n\t}\n\tfunction buildMessageArgs(logData) {\n\t\tvar msgStr = '';\n\t\tvar msgObj = {};\n\t\t//TODO: Attach time stamp\n\t\t//Attach location information to the beginning of message\n\t\tif (_.isObject(logData)) {\n\t\t\tif (logLevel == 'debug') {\n\t\t\t\tif (_.has(logData, 'func')) {\n\t\t\t\t\tif (_.has(logData, 'obj')) {\n\t\t\t\t\t\t//Object and function provided\n\t\t\t\t\t\tmsgStr += `[${logData.obj}.${logData.func}()]\\n `;\n\t\t\t\t\t} else if (_.has(logData, 'file')) {\n\t\t\t\t\t\tmsgStr += `[${logData.file} > ${logData.func}()]\\n `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsgStr += `[${logData.func}()]\\n `;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Print each key and its value other than obj and func\n\t\t\t_.each(_.omit(_.keys(logData)), (key, ind, list) => {\n\t\t\t\tif (key != 'func' && key != 'obj') {\n\t\t\t\t\tif (key == 'description' || key == 'message') {\n\t\t\t\t\t\tmsgStr += logData[key];\n\t\t\t\t\t} else if (_.isString(logData[key])) {\n\t\t\t\t\t\t// msgStr += key + ': ' + logData[key] + ', ';\n\t\t\t\t\t\tmsgObj[key] = logData[key];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Print objects differently\n\t\t\t\t\t\t// msgStr += key + ': ' + logData[key] + ', ';\n\t\t\t\t\t\tmsgObj[key] = logData[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tmsgStr += '\\n';\n\t\t} else if (_.isString(logData)) {\n\t\t\tmsgStr = logData;\n\t\t}\n\t\tvar msg = [msgStr, msgObj];\n\n\t\treturn msg;\n\t}\n\n\tclass Fireadmin {\n\t\t/* Constructor\n\t\t * @param {string} appName Name of application\n\t\t */\n\t\tconstructor(url, opts) {\n\t\t\tif (!url) {\n\t\t\t\tlogger.error({description: 'Application name requires to use Fireadmin.', func: 'constructor', obj: 'Fireadmin'});\n\t\t\t\tthrow new Error('Application name is required to use Fireadmin');\n\t\t\t} else {\n\t\t\t\tthis.ref = new Firebase(url);\n\t\t\t\tthis.fbUrl = url;\n\t\t\t\tthis.appName = AppNameFromUrl(url);\n\t\t\t}\n\t\t\tif (opts) {\n\t\t\t\tthis.options = opts;\n\t\t\t}\n\t\t}\n\t\tget auth() {\n\t\t\treturn this.ref.getAuth();\n\t\t}\n\t\tget isAuthorized() {\n\t\t\treturn !this.auth || this.auth === null;\n\t\t}\n\t\t/**\n\t  * This callback is displayed as part of the Requester class.\n\t  * @callback Fireadmin~errorCb\n\t  * @param {String} code\n\t  * @param {String} message\n\t  */\n\t  /**\n\t   * Creates an object provided the name of the list the object will go into and the object itthis.\n\t   * The object is created with a createdAt parameter that is a server timestamp from Firebase.\n\t   * If a user is currently signed in, the object will contain the author's `$uid` under the author parameter.\n\t   * @param {String} listName - The name of the list the object will be put into. `Required`\n\t   * @param {Object} objectData - Data you wish to be contained within new object. `Required`\n\t   * @param {Function} onSuccess - Function that runs when your object has been created successfully and returns newly created object. `Optional`\n\t   * @param {Function} onError - Function that runs if there is an error creating the object. `Optional`\n\t   * @example\n\t   * //creates new message object in message list\n\t   * fa.createObject('messages', {title:Example, content:'Cool Message'}, ).then(function(newMsg){\n\t   *  logger.log('New Message created successfuly:', newMsg);\n\t   * }, function(err){\n\t   *  logger.error('Error creating new message:', err);\n\t   * });\n\t   */\n\t\tcreateObject(listName, obj) {\n\t    var auth = this.ref.getAuth();\n\t    if (auth) {\n\t      obj.author = auth.uid;\n\t    }\n\t    obj.createdAt = Date.now();\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child(listName).push(obj, (err) => {\n\t\t      if (!err) {\n\t\t\t\t\t\treturn resolve(obj);\n\t\t      } else {\n\t\t\t\t\t\treturn reject(err);\n\t\t      }\n\t\t    });\n\t\t\t});\n\t  }\n\t\t/**\n\t\t * Gets list of objects created by the currently logged in User.\n\t\t * @param {String | Array} listPath -  The name or path of the list the objects will be grabbed from. `Required`\n\t\t * @param {String} Uid - The Uid of the user that created objects. `Required`\n\t\t * @param {Function} onSuccess - Function that runs when the list has been retrieved successfully. `Optional`\n\t\t * @param {Fireadmin~errorCb} onError -  Function that runs if there is an error. `Optional`\n\t\t * @example\n\t\t * // Signin User with email and password\n\t\t * var uid = 'simplelogin:1';\n\t\t * fb.listByUid('messages', uid, function(messageList){\n\t\t *  logger.log('List of messages by ' + uid + ' : ', messageList);\n\t\t * }, function(err){\n\t\t *  logger.error('Error getting message list:', err);\n\t\t * });\n\t\t */\n\t\tlistByCurrentUser(listName) {\n\t\t\tif (!listName) {\n\t\t\t\treturn Promise.reject({message: 'Listname required to list objects.'});\n\t\t\t}\n\t    if (this.isAuthorized) {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tlet authorObjQuery = this.ref.child(listName).orderByChild('author').equalTo(auth.uid);\n\t\t\t\t\tauthorObjQuery.on('value', (listSnap) => {\n\t\t\t\t\t\treturn resolve(listSnap.val());\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t});\n\t\t\t\t});\n\t    } else {\n\t      var error = {code: 'INVALID_AUTH', message: 'listByCurrentUser cannot load list without current user'};\n\t      logger.error(error.message);\n\t\t\t\treturn Promise.reject(error);\n\t    }\n\t\t}\n\t\t/**\n\t\t * Gets list of objects created by the currently logged in User.\n\t\t * @param {String | Array} listPath -  The name or path of the list the objects will be grabbed from. `Required`\n\t\t * @param {String} Uid - The Uid of the user that created objects. `Required`\n\t\t * @param {Function} onSuccess - Function that runs when the list has been retrieved successfully. `Optional`\n\t\t * @param {Fireadmin~errorCb} onError -  Function that runs if there is an error. `Optional`\n\t\t * @example\n\t\t * // Signin User with email and password\n\t\t * var uid = 'simplelogin:1';\n\t\t * fb.listByUid('messages', uid, function(messageList){\n\t\t *  logger.log('List of messages by ' + uid + ' : ', messageList);\n\t\t * }, function(err){\n\t\t *  logger.error('Error getting message list:', err);\n\t\t * });\n\t\t */\n\t\tlistByUid(listPath, uid) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.fbRef(listPath).orderByChild('author').equalTo(uid).on('value', (listSnap) => {\n\t\t\t\t\treturn Promise.resolve(listSnap.val());\n\t\t\t\t}, (err) => {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t/**\n\t   * Get total user count\n\t   * @param {Function} onSuccess - Function that returns total user count. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * fa.getUserCount('users', function(count){\n\t   *  logger.log('There are is a total of ' + count + ' users.');\n\t   * });\n\t   */\n\t  getUserCount() {\n\t    return new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child('users').on('value', (usersListSnap) => {\n\t\t\t\t\tresolve(usersListSnap.numChildren());\n\t\t    }, (err) => {\n\t\t\t\t\tlogger.error({description: 'Error getting user count.', func: 'getUserCount', obj: 'Fireadmin'});\n\t\t\t\t\treject(err);\n\t\t    });\n\t\t\t});\n\t  }\n\t  /** Get the number of users that are currently online.\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess - Function that returns number of users currently online. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * fa.getOnlineUserCount(function(count){\n\t   *   logger.log('There are ' + count + ' users currently online.');\n\t   * });\n\t   *\n\t   */\n\t  getOnlineUserCount() {\n\t    return new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child('presence').on('value', (onlineUserSnap) => {\n\t\t\t\t\tlogger.log('There are currently' + onlineUserSnap.numChildren() + ' users online.');\n\t\t\t\t\tresolve(onlineUserSnap.numChildren());\n\t\t\t\t}, (err) => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t  }\n\t  /**\n\t   * Get the number of sessions between two times\n\t   * @param {Number} startTime - The time at which to start the between period (in UTC ms). `Required`\n\t   * @param {Number} endTime - The time at which to start the between period (in UTC ms). `Required`\n\t   * @param {Function} onSuccess - Function that runs on completion of gathering list count. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * //String list name\n\t   * fa.getObjectCount('users', function(count){\n\t   *  logger.log('There are ' + count + ' users');\n\t   * });\n\t   */\n\t  sessionsBetween(time1, time2) {\n\t    logger.log({description: 'Sessions between called.', startTime: time1, endTime: time2, func: 'sessionsBetween', obj: 'Fireadmin'});\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child('sessions').orderByChild('ended').startAt(time1).endAt(time2).on('value', (sessionsSnap) => {\n\t\t\t\t\tresolve(sessionsSnap.numChildren());\n\t\t\t\t}, (err) => {\n\t\t\t\t\tlogger.error({description: 'Error getting sessions between specified times.', error: err, func: 'sessionsBetween', obj: 'Fireadmin'});\n\t\t\t\t\treject({message: 'Error getting sessions.'});\n\t\t\t\t});\n\t\t\t});\n\n\t  }\n\t  /**\n\t   * Get the number of sessions since a specific time\n\t   * @param {String} time - The UTC time to calculate from.\n\t   * @param {Function} onSuccess - Function that runs on completion of gathering list count. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * var dt = new Date(); //Create a new Data object\n\t   * dt.setMonth(dt.getMonth()-1); //Set date back a month\n\t   * var monthAgo = dt.getTime(); //Convert to UTC time\n\t   * //Get number of sessions since a month ago\n\t   * fa.sessionsSince(monthAgo, function(count){\n\t   *  logger.log('There are ' + count + ' sessions in the past month');\n\t   * });\n\t   */\n\t  sessionsSince(time) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child('sessions').orderByChild('ended').startAt(time).endAt(Date.now()).on('value', (sessionsSnap) => {\n\t\t\t\t\treturn resolve(sessionsSnap.numChildren());\n\t\t\t\t}, (err) => {\n\t\t\t\t\tlogger.error({description: 'Error getting sessions between specified times.', error: err, func: 'sessionsSince', obj: 'Fireadmin'});\n\t\t\t\t\treturn reject(err);\n\t\t\t\t});\n\t\t\t});\n\t  }\n\t  /**\n\t   * Get count of objects in a given path or list\n\t   * @param {Function} onSuccess - Function that runs on completion of gathering average session length. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * //Get the average session length\n\t   * fa.averageSessionLength(function(count){\n\t   *  logger.log('The average session length is ~' + count ' mins');\n\t   * });\n\t   */\n\t  averageSessionLength() {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child('sessions').on('value', (sessionsSnap) => {\n\t\t      var totalLength = null;\n\t\t      var sessionCount = sessionsSnap.numChildren();\n\t\t      sessionsSnap.forEach((sessionSnap) => {\n\t\t        var session = sessionSnap.val();\n\t\t        if (session.hasOwnProperty('ended') && session.hasOwnProperty('began')) {\n\t\t          //Gather length of session\n\t\t          // Convert difference in ms to minutes\n\t\t\t\t\t\t\tvar conversion = (session.ended - session.began) / (1000 * 60) ;\n\t\t          totalLength = totalLength + conversion;\n\t\t          logger.log('total length is now:', totalLength);\n\t\t        } else {\n\t\t          logger.log('removing unfinished session:', sessionSnap.val());\n\t\t          sessionCount--;\n\t\t          logger.log('session count:', sessionCount);\n\t\t        }\n\t\t      });\n\t\t      logger.log('totalLength:', totalLength);\n\t\t      var average = Math.floor(totalLength / sessionCount);\n\t\t      logger.log('average in minutes:', average);\n\t\t\t\t\treturn resolve(average);\n\t\t    }, (err) => {\n\t\t\t\t\treturn reject(err);\n\t\t    });\n\t\t\t});\n\n\t  }\n\t  removeUserSessions(uid) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child('sessions').orderByChild('user').equalTo(uid).on('value', (sessionsSnap) => {\n\t\t     var sessionCount = sessionsSnap.numChildren();\n\t\t      sessionsSnap.forEach((session) => {\n\t\t        session.ref().remove();\n\t\t      });\n\t\t      logger.log(sessionCount + ' Sessions sucessfully removed');\n\t\t\t\t\treturn resolve();\n\t\t    }, (err) => {\n\t\t\t\t\treturn reject(err);\n\t\t    });\n\t\t\t});\n\t  }\n\t  customAuthToken(img) {\n\t    //Send file to server\n\t    var fa = this;\n\t    var reqData = {appName: fa.appName};\n\t    apiRequest('auth', reqData, (res) => {\n\t      if (res.hasOwnProperty('token')) {\n\t        logger.log('auth request response:', res);\n\t\t\t\t\treturn Promise.resolve(res);\n\t      } else {\n\t\t\t\t\treturn Promise.reject({code: 'SERVER_ERROR'});\n\t      }\n\t    }, (err) => {\n\t\t\t\treturn Promise.reject(err);\n\t    });\n\t  }\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Object | String} loginData - Login data object or string for 3rd Party Signup (Twitter, Github, Google) `Required`\n\t   * @param {Object} loginData.email - Email of new user (`Required` only for email signup).\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.userSignup({email:test@test.com, password:'testtest'}, function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  userSignup(signupData) {\n\t    if (typeof signupData === 'object' && signupData.hasOwnProperty('email')) {\n\t      //Email signup\n\t      if (!signupData.hasOwnProperty('password') && signupData.password.length <= 8) {\n\t        return handleCb(errorCb,{message: 'A valid Password is required to signup.'});\n\t      }\n\t      //Create new user in simple login\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis.createUser(signupData, (error) => {\n\t\t        if (error === null) {\n\t\t          logger.log('[emailSignup] User created successfully. Logging in as new user...');\n\t\t            // Login with new account\n\t\t            this.emailAuth(signupData, (authData) => {\n\t\t              //Create new user profile\n\t\t              createUserProfile(authData, this.ref, (userAccount) => {\n\t\t\t\t\t\t\t\t\t\tresolve(userAccount);\n\t\t              }, (err) => {\n\t\t                //Error creating profile\n\t\t\t\t\t\t\t\t\t\treject(err);\n\t\t              });\n\t\t            }, (err) => {\n\t\t              //Error authing with email\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t            });\n\t\t        } else {\n\t\t          //Error creating new User\n\t\t          logger.error('[emailSignup] Error creating user:', error.message);\n\t\t\t\t\t\t\treject(error);\n\t\t        }\n\t\t      });\n\t\t\t\t});\n\t    } else if (signupData.hasOwnProperty('type') && signupData.type == 'username') {\n\t      //[TODO] User signup with with custom auth token with username as uid\n\t      //Username signup\n\t      //request a signup with username as uid\n\t      apiRequest('signup', signupData, (res) => {\n\t        logger.log('request for token successful:', res);\n\t        return this.authWithCustomToken(res.token, (err, authData) => {\n\t          if (err) {\n\t\t\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t\t\t}\n\t          return createUserProfile(authData, this.ref, (userAccount) => {\n\t\t\t\t\t\t\treturn Promise.resolve(userAccount);\n\t          }, (err) => {\n\t            //Error creating profile\n\t\t\t\t\t\t\treturn Promise.reject(err);\n\t          });\n\t        });\n\t      }, (err) => {\n\t\t\t\t\treturn Promise.reject(err);\n\t      });\n\t    } else if (typeof signupData == 'string' || signupData.hasOwnProperty('type')) {\n\t      //3rd Party Signup\n\t\t\t\tlet provider = typeof signupData === 'string' ? signupData : signupData.type;\n\t      // Auth using 3rd party OAuth\n\t      return this.authWithOAuthPopup(provider, (err, authData) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t\t}\n\t        //Create new profile with user data\n\t        return createUserProfile(authData, this.ref, (userAccount) => {\n\t\t\t\t\t\treturn Promise.resolve(userAccount);\n\t        }, (err) => {\n\t          //Error creating profile\n\t\t\t\t\t\treturn Promise.reject(err);\n\t        });\n\t      });\n\t    }\n\t  }\n\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Object} loginData Login data of new user\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.emailAuth({email:test@test.com, password:'testtest'}, function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  emailAuth(loginData) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.authWithPassword(loginData, (error, authData) => {\n\t\t      if (error === null) {\n\t\t        // user authenticated with Firebase\n\t\t        logger.log({description: 'Successfully authed.', authData: authData, userId: authData.uid, provider: authData.provider, func: 'emailAuth', obj: 'Fireadmin'});\n\t\t        // Manage presence\n\t\t        this.setupPresence(authData.uid);\n\t\t        // [TODO] Check for account/Add account if it doesn't already exist\n\t\t\t\t\t\treturn resolve(authData);\n\t\t      } else {\n\t\t        logger.error('Error authenticating user:', error);\n\t\t\t\t\t\treturn reject(err);\n\t\t      }\n\t\t    });\n\t\t\t});\n\t  }\n\t  /** Modified version of Firebase's authWithOAuthPopup function that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {String} provider - Login data of new user. `Required`\n\t   * @param {Function} onSuccess - Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.authWithOAuthPopup('google', function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  authWithOAuthPopup(provider) {\n\t    //[TODO] Check enabled login types\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.authWithOAuthPopup(provider, (error, authData) => {\n\t\t      if (error === null) {\n\t\t        // user authenticated with Firebase\n\t\t        logger.log({description: 'Auth popup responded.', authData: authData, id: authData.uid, provider: authData.provider, func: 'authWithOAuthPopup', obj: 'Fireadmin'});\n\t\t        // Manage presence\n\t\t        this.setupPresence(authData.uid);\n\t\t        // [TODO] Check for account/Add account if it doesn't already exist\n\t\t\t\t\t\treturn resolve(authData);\n\t\t      } else {\n\t\t        logger.error('Error authenticating user:', error);\n\t\t\t\t\t\treturn reject(error);\n\t\t      }\n\t\t    });\n\t\t\t});\n\n\t  }\n\t  newUserFromAnonyomous() {\n\n\t  }\n\t  /** Log in with Github through OAuth\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess - Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.githubAuth(function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  githubAuth() {\n\t    return this.authWithOAuthPopup('github');\n\t  }\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.githubAuth(function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  googleAuth() {\n\t    return this.authWithOAuthPopup('google');\n\t  }\n\t  /** Modified version of Firebase's authWithPassword that handles presence\n\t   * @memberOf Fireadmin#\n\t   * @param {Function} onSuccess Function that runs when the user is successfully authenticated with presence enabled. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Signin User with email and password\n\t   * fb.githubAuth(function(auth){\n\t   *  logger.log('Login Successful for user:', auth.uid);\n\t   * }, function(err){\n\t   *  logger.error('Error logging in:', err);\n\t   * });\n\t   */\n\t  twitterAuth() {\n\t    return this.authWithOAuthPopup('twitter');\n\t  }\n\n\t  /** Get account for a user given their uid.\n\t   * @memberOf Fireadmin#\n\t   * @param {String} uid Unique Id for account.\n\t   * @param {Function} onSuccess Function that returns account info once it is loaded. `Optional`\n\t   * @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * // Get account for uid: simplelogin:1\n\t   * fa.accountByUid('simplelogin:1', function(account){\n\t   *   logger.log('Account for user with uid: ' + uid + ' is : ', account);\n\t   * }, function(err){\n\t   *    logger.error('Error getting account for ' + uid + ' : ', err);\n\t   * });\n\t   *\n\t   */\n\t  accountByUid(uid) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.ref.child(uid).on('value', (accountSnap) => {\n\t\t      resolve(accountSnap.val());\n\t\t    }, (err) => {\n\t\t      logger.error({description: 'Error getting account by UID.', uid: uid, error: err, func: 'accountByUid', obj: 'Fireadmin'});\n\t\t\t\t\treject(err);\n\t\t    });\n\t\t\t});\n\t  }\n\t  /** Get user account that is associated to a given email.\n\t   * @memberOf Fireadmin#\n\t   * @param {String} email - Email of account to retreive.\n\t   * @param {Fireadmin~accountByEmailCb} onSuccess - Function that returns account info once it is loaded. `Optional`\n\t   * @param {Fireadmin~errorCb} onError - Function that runs if there is an error. `Optional`\n\t   * @example\n\t   * fa.accountByEmail('test@test.com', function(account){\n\t   *   logger.log('Account loaded:' + account);\n\t   * }, function(err){\n\t   *  logger.error('Error getting account by email:', err);\n\t   * });\n\t   *\n\t   */\n\t  accountByEmail(email) {\n\t    if (email && typeof email == 'string') {\n\t      return this.ref.child('users').orderByChild('email').equalTo(email).on('value', (querySnapshot) => {\n\t        logger.log('accountByEmail returned:', querySnapshot.val());\n\t\t\t\t\treturn Promise.resolve(querySnapshot.val());\n\t      }, (err) => {\n\t        logger.error('Error getting account by email:', err);\n\t\t\t\t\treturn Promise.reject(err);\n\t      });\n\t    } else {\n\t\t\t\treturn Promise.reject({message: 'Email is required to get account.'});\n\t    }\n\t  }\n\t  /**\n\t   * Success callback for accountByEmail function that returns the account associated with a provided email.\n\t   * @callback Fireadmin~accountByEmailCb\n\t   * @param {Object} account Account associated with provided email.\n\t   * @param {String} account.email Email associated with account.\n\t   * @param {String} account.createdAt UTC Time when the account was created.\n\t   */\n\n\t  /** Start presence management for a specificed user uid. This function is used within Fireadmin login functions.\n\t   * @memberOf Fireadmin#\n\t   * @param {String} uid Unique Id for user that for which presence is being setup.\n\t   * @example\n\t   * fa.setupPresence('simplelogin:1');\n\t   *\n\t   */\n\t  setupPresence(uid) {\n\t    logger.log({description: 'setupPresence called', uid: uid, func: 'setupPresense', obj: 'Fireadmin'});\n\t    var amOnline = this.ref.child('.info/connected');\n\t    var onlineRef = this.ref.child('presence').child(uid);\n\t    var sessionsRef = this.ref.child('sessions');\n\t    var userRef = this.ref.child('users').child(uid);\n\t    var userSessionRef = this.ref.child('users').child(uid).child('sessions');\n\t    var pastSessionsRef = userSessionRef.child('past');\n\t    return amOnline.on('value', (snapShot) => {\n\t      if (snapShot.val()) {\n\t        //user is online\n\t        var onDisconnectRef = this.ref.onDisconnect();\n\t        // add session and set disconnect\n\t        var session = sessionsRef.push({began: Firebase.ServerValue.TIMESTAMP, user: uid});\n\t        var endedRef = session.child('ended');\n\t        endedRef.onDisconnect().set(Firebase.ServerValue.TIMESTAMP);\n\t        //add correct session id to user\n\t        // adding session id to current list under user's session\n\t        var currentSesh = userSessionRef.child('current').push(session.key());\n\t        // Remove session id from users current session folder\n\t        currentSesh.onDisconnect().remove();\n\t        // remove from presence list\n\t        onlineRef.set(true);\n\t        onlineRef.onDisconnect().remove();\n\t        // Add session id to past sessions on disconnect\n\t        // pastSessionsRef.onDisconnect().push(session.key());\n\t        // Do same on unAuth\n\t        this.onAuth((authData) => {\n\t          if (!authData) {\n\t            endedRef.set(Firebase.ServerValue.TIMESTAMP);\n\t            currentSesh.remove();\n\t            onlineRef.remove();\n\t          }\n\t        });\n\t      }\n\t    });\n\t  }\n\t  /** Get a firebase reference for a path in array | string form\n\t   *\n\t   * @memberOf Fireadmin#\n\t   * @param {String|Array} path relative path to the root folder in Firebase instance\n\t   * @returns A Firebase instance\n\t   * @example\n\t   * //Array as path\n\t   * var userRef = fa.fbRef(['users', uid]);\n\t   */\n\t  fbRef(path) {\n\t    var ref = this.ref;\n\t    var args = Array.prototype.slice.call(arguments);\n\t    if (args.length) {\n\t      //[TODO] Have this return a Fireadmin object\n\t      ref = ref.child(pathRef(args));\n\t    }\n\t    return ref;\n\t  }\n\t};\n\t/**\n\t\t* Extracts an app name out of a Firebase url\n\t\t* @function AppNameFromUrl\n\t\t* @param {String} authData Login data of new user\n\t\t* @returns {String} appName App name extracted from url\n\t\t*/\n\t function AppNameFromUrl(url) {\n\t\t //remove https:// from beginging and .firebaseio.com from the end\n\t\t return url.match(/^(?:https?|ftp)?:\\/\\/([A-Za-z0-9\\-]{0,61}[A-Za-z0-9])?/)[1];\n\t }\n\t /** Makes a post request to the Fireadmin API\n\t\t* @function apiRequest\n\t\t* @param {String} path - Path of request within api. `Required`\n\t\t* @param {Object} data - Data to include in post request. `Required`\n\t\t* @param {Function} onSuccess Function that runs when request has completed successfully. `Optional`\n\t\t* @param {Fireadmin~errorCb} onError Function that runs if there is an error. `Optional`\n\t\t* @example\n\t\t* // Request to /upload with image object\n\t\t* apiRequest('upload', {img:imgObj}, function(res){\n\t\t*  console.log('Api request to upload completed successfully', res);\n\t\t* }, function(err){\n\t\t*  console.error('Error requesting to upload:', err);\n\t\t* });\n\t\t*/\n\t function apiRequest(reqLocation, reqData, successCb, errorCb) {\n\t\t console.log('apiRequest sending to ' + reqUrl + ' ...');\n\t\t //goog.net.XhrIo.send(url, callback, method, content, headers)\n\t\t//  goog.net.XhrIo.send(reqUrl, function(e){\n\t\t// \t if(e.target.isComplete() && e.target.isSuccess()){\n\t\t// \t\t var res = e.target.getResponse();\n\t\t// \t\t console.log('apiRequest responded:', res);\n\t\t// \t\t //Check for existance of response, that it has content, and that content contains a property 'url'\n\t\t// \t\t if(res){\n\t\t// \t\t\t //Save image object to firebase that includes new image url\n\t\t// \t\t\t handleCb(successCb, res);\n\t\t// \t\t } else {\n\t\t// \t\t\t console.error('Server error');\n\t\t// \t\t\t handleCb(errorCb, {code:'SERVER_ERROR'});\n\t\t// \t\t }\n\t\t// \t } else {\n\t\t// \t\t handleCb(errorCb, e.target.getLastError());\n\t\t// \t }\n\t\t//  }, 'POST', reqData);\n\t }\n\t /** Create a new user profile under 'users'\n\t\t* @function createUserProfile\n\t\t* @param {Object} authData - Login data of new user. `Required`\n\t\t* @param {Reference} ref - Main reference to create profile on. `Required`\n\t\t* @param {Function} onSuccess - Function that runs when profile has been created sucessfully. `Optional`\n\t\t* @param {Fireadmin~errorCb} - onError Function that runs if there is an error. `Optional`\n\t\t* @example\n\t\t* // Create a new user profile\n\t\t* createUserProfile({email:test@test.com, password:'testtest'}, fa.ref, function(auth){\n\t\t*  console.log('Profile created successfully for user:', auth.uid);\n\t\t* }, function(err){\n\t\t*  console.error('Error creating user profile:', err);\n\t\t* });\n\t\t*/\n\t function createUserProfile(authData, ref) {\n\t\t console.log('createUserAccount called:', arguments);\n\t\t var userRef = ref.child('users').child(authData.uid);\n\t\t var userObj = {role: 10, provider: authData.provider};\n\t\t if (authData.provider == 'password') {\n\t\t\t userObj.email = authData.password.email;\n\t\t } else {\n\t\t\t console.log('create 3rd party linked profile:', authData);\n\t\t\t _.extend(userObj, authData);\n\t\t }\n\t\t //Check if account with given email already exists\n\t\t return ref.child('users').orderByChild('email').equalTo(userObj.email).on('value', (userQuery) => {\n\t\t\t if (!userQuery.val()) {\n\t\t\t\t //Account with given email does not already exist\n\t\t\t\t userRef.once('value', (userSnap) => {\n\t\t\t\t\t if (userSnap.val() == null || userSnap.hasChild('sessions')) {\n\t\t\t\t\t\t userObj.createdAt = Firebase.ServerValue.TIMESTAMP;\n\t\t\t\t\t\t // [TODO] Add check for email before using it as priority\n\t\t\t\t\t\t return userRef.setWithPriority(userObj, userObj.email, (err) => {\n\t\t\t\t\t\t\t if (!err) {\n\t\t\t\t\t\t\t\t console.log('New user account created:', userSnap.val());\n\t\t\t\t\t\t\t\t return Promise.resolve(userSnap.val());\n\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t return Promise.reject({message: 'Error creating user profile'});\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t });\n\t\t\t\t\t } else {\n\t\t\t\t\t\t console.error('User account already exists', userSnap.val());\n\t\t\t\t\t\t return Promise.reject(userSnap.val());\n\t\t\t\t\t }\n\t\t\t\t });\n\t\t\t } else {\n\t\t\t\t // console.warn('Account already exists. Session must have been added already:', JSON.stringify(userQuery.val()));\n\t\t\t\t // successCb(userQuery.val());\n\t\t\t\t var error = {message: 'This email has already been used to create an account', account: JSON.stringify(userQuery.val()), status: 'ACCOUNT_EXISTS'};\n\t\t\t\t return Promise.reject(error);\n\t\t\t }\n\t\t }, function(err) {\n\t\t\t //Error querying for account with email\n\t\t\t return Promise.reject(err);\n\t\t });\n\t };\n\n\treturn Fireadmin;\n\n}));"],"sourceRoot":"/source/"}